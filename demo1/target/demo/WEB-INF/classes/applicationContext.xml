<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 开启注解扫描器 -->
    <!--<context:annotation-config/>-->
    <!--<bean id="redisLock" class="lock.redislock.RedisLock"></bean>-->
    <!--<bean id="jdkLock" class="lock.jdklock.JdkLock"></bean>-->

    <!-- 扫描指定包下的Bean(配置了此组件之后,该组件 <context:annotation-config/> 可以不用配置) -->
    <context:component-scan base-package="lock.*"/>

    <!-- 在Spring配置文件中注册该springContextHolder工具类 -->
    <bean id="springContextHolder" class="spring.util.SpringContextHolder"></bean>

    <!-- 指定spring读取config.properties配置 -->
    <context:property-placeholder location="classpath:config.properties"></context:property-placeholder>
    <!--<bean id="configurer" class="org.springframework.beans.factory.config.PropertyOverrideConfigurer">-->
        <!--<property name="locations">-->
            <!--<list>-->
                <!--<value>classpath:config.properties</value>-->
            <!--</list>-->

        <!--</property>-->

    <!--</bean>-->


    <!-- 配置redis连接池 -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${jedis.redis.maxActive}"/>
        <property name="maxIdle" value="${jedis.redis.maxIdle}"/>
    </bean>

    <!-- 配置redis连接工厂 -->
    <bean id="jedisConncetionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          destroy-method="destroy">
        <property name="hostName" value="${redis.ip}"/>
        <property name="port" value="${redis.port}"/>
        <property name="database" value="${redis.database}"/>
        <property name="timeout" value="${redis.timeout}"/>
        <property name="usePool" value="${redis.usePool}"/>
        <property name="poolConfig" ref="jedisPoolConfig"/>
    </bean>

    <!-- 引入多个配置文件 -->
    <!--<bean id="configurer" class="org.springframework.beans.factory.config.PropertyOverrideConfigurer">
        <property name="locations">
            <list>
                <value>classpath:config.properties</value>
            </list>

        </property>

    </bean>
    &lt;!&ndash; jedis pool配置 &ndash;&gt;
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${jedis.redis.maxActive}"></property>
        <property name="maxIdle" value="${jedis.redis.maxIdle}"></property>
        <property name="maxWaitMillis" value="${jedis.redis.maxWaitMillis}"></property>
        &lt;!&ndash;  &ndash;&gt;
        <property name="testWhileIdle" value="${jedis.redis.testWhileIdle}"></property>
        <property name="testOnBorrow" value="${jedis.redis.testOnBorrow}"></property>
        <property name="testOnReturn" value="${jedis.redis.testOnReturn}"></property>
    </bean>

    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.ip}"></property>
        <property name="port" value="${redis.port}"></property>
        <constructor-arg index="0" ref="poolConfig"></constructor-arg>
    </bean>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="connectionFactory"></property>
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"></bean>
        </property>
    </bean>

    <bean id="redisUtil" class="com.util.RedisTemplate">
        <property name="redisTemplate" ref="redisTemplate" />
    </bean>-->




    <!-- 数据源 -->
    <!--<bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost:3306/test" />
        <property name="username" value="root" />
        <property name="password" value="" />
    </bean>-->

    <!-- 配置session工厂 -->
    <!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>-->

    <!-- 事务管理器 -->
    <!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>-->

    <!-- 配置AOP通知 -->
    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">
        &lt;!&ndash; 配置事务属性 &ndash;&gt;
        <tx:attributes>
            &lt;!&ndash; 添加事务管理的方法 &ndash;&gt;
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="select*" read-only="true"/>
        </tx:attributes>
    </tx:advice>-->

    <!-- 配置AOP，为添加事务管理的操作配置AOP -->
    <!--<aop:config>
        &lt;!&ndash; 引入的Spring定义的事务通知，需要使用aop:advisor &ndash;&gt;
        &lt;!&ndash; 下面难 &ndash;&gt;
        <aop:advisor advice-ref="txAdvice"
                     pointcut="execution(* com.edu.test.service.*.*(..))"
        />
    </aop:config>-->



</beans>